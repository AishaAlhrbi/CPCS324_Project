/*
 *  @authors Reem, Aisha, Sara, Hanady
 * CPCS-324
 * Project Code
 * 4 June. 2023
 */
package PhoneNetworkApp;

import GraphFramework.Graph;
import GraphFramework.KruskalAlg;
import GraphFramework.MSTAlgorithm;
import GraphFramework.MHPrimAlg;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class PhoneNWDesignApp {

    private static double MinHeapPrimfinishtTime;
 
    public static void main (String[] args) throws FileNotFoundException {
            // Intilize variables
            try ( 
                    Scanner input = new Scanner(System.in)) {
                // Intilize variables
                int verticesNO = 0; 
                int edgesNO = 0;
                
                
                System.out.println("\t\t|Compute the Minimum Spanning Tree and Compare Running Time|\n"
                        + "\t\t|Using Kruskal's Algorithm & Prim's Algorithm   |\n"
                        + "\t\t-------------------------------------------------------------------\n");
                
                System.out.println("\t\t***  (1) Requirement 1 Using Read_from_Graph Funcntion **** \n"
                        + "\t\t***  (2) Requirement 2 Using Make_Graph Func.      ***\n");
                
                // ------- Read User Input for the Selected Requirement -------- //
                
                System.out.print("Select Requirement Option: ");
                
                int userInput = input.nextInt(); // Option of the Requirement
                
                // make sure user enter within option
                while ( userInput != 1 && userInput != 2) {
                    System.out.println("Wrong Selection. ");
                    System.out.print("Select Requirement Option -> ");
                    userInput = input.nextInt();
                }
                
                
                // ------------------------ Requirement 1 ------------------------ //
                
                if(userInput == 1) {
                    System.out.println("\n\n\t\t\t-Requirement 1: Read From Graph function-");
                    
                    File graphFile = new File("graphFile.txt"); // Read from File
                    Graph network = new Graph(); // 
                    network.readGraphFromFile(graphFile); // Access readGraphFromFile Method in Graph Class
                    MSTAlgorithm MSTAlgorithm;
                    
                    // --------------------------------------------- KRUSKAL ------------------------------------------------ //
                    System.out.println("\nThe phone network (minimum spanning tree) generated by Kruskal algorithm"
                            + " is as follows");
                    
                    MSTAlgorithm = new KruskalAlg(network);
                    MSTAlgorithm.findMST(network); // Read Graph in Kruskal Algorithm
                    
                    MSTAlgorithm.displayResultingMST(); // Print info of MST List
                    MSTAlgorithm.displayMSTcost(); // Cost  
                    
                    // --------------------------------------------- PQPRIM ------------------------------------------------- //
                    System.out.println("\nThe phone network (minimum spanning tree) generated by min-heap based Prim algorithm is as follows:");
                    
                    
                    MSTAlgorithm = new MHPrimAlg(network);
                    MSTAlgorithm.findMST(network); // Read Graph in Prim Algorithm
                    
                    MSTAlgorithm.displayResultingMST(); // Print info of MST List
                    MSTAlgorithm.displayMSTcost(); // Cost
                    
                } // End of Requirement 1
                
                
                // --------------------- Requirement 2 ------------------ //
                
                if (userInput == 2) {
                    System.out.println("\t\t\t-Requirement 2: Make Graph function-");
                    
                    System.out.println("Cases of Edges(m) and Vertcies(n):");
                    System.out.println("(1) n= 1000, m= 10000\n(2) n= 1000, m= 15000\n(3) n= 1000, m= 25000");
                    System.out.println("(4) n= 5000, m= 15000\n(5) n= 1000, m= 25000");
                    System.out.println("(6) n= 10000, m= 15000\n(7) n= 10000, m= 25000");
                    
                    // ------- Read User Input for the Selected Case -------- //
                    
                    System.out.print("Select your Test Option -> ");
                    userInput = input.nextInt(); // Option of the Case
                    
                    do {
                        switch (userInput) {
                            case 1: {
                                verticesNO = 1000;
                                edgesNO = 10000;
                            }
                            ;
                            break;
                            
                            case 2: {
                                verticesNO = 1000;
                                edgesNO = 15000;
                            }
                            ;
                            break;
                            case 3: {
                                verticesNO = 1000;
                                edgesNO = 25000;
                            }
                            ;
                            break;
                            case 4: {
                                verticesNO = 5000;
                                edgesNO = 15000;
                            }
                            ;
                            break;
                            case 5: {
                                verticesNO = 5000;
                                edgesNO = 25000;
                            }
                            ;
                            break;
                            case 6: {
                                verticesNO = 10000;
                                edgesNO = 15000;
                            }
                            ;
                            break;
                            case 7: {
                                verticesNO = 10000;
                                edgesNO = 25000;
                            }
                            ;
                            break;
                            
                            default:
                                System.out.println("Option not found.");
                                System.out.print("Select your Test Option -> ");
                                //      userInput = input.nextInt(); // Option of the Case
                                break;
                        }
                    } while (1 < 1 || 7 > 7);
                    
                    
                    
                    // -------- IMPORTANT NOTE -------- //
                    
                    /**
                     * The two algorithms require an undirected graph.
                     * but in case of a directed graph we will not automatically stop the algorithm,
                     * So, we will only work on undirected graph.
                     */
                    
                    Graph network = new Graph(verticesNO, edgesNO, false); // Create An Object of Graph 
                    network.makeGraph(verticesNO, edgesNO); // Access readGraphFromFile Method in Graph Class
                    MSTAlgorithm MSTAlgorithm;
                    System.out.println("\n***\nP.S. All generated graphs will remain undirected.\n***\n");
                    
                    // --------------------------------------------- KRUSKAL ------------------------------------------------ //
                    System.out.println("\nThe phone network (minimum spanning tree) generated by Kruskal algorithm"
                            + " is as follows");
                    
                    MSTAlgorithm = new KruskalAlg(network); // Choose Kruskal
                    double KruskalstartTime = System.currentTimeMillis(); // Start time of Kruskal
                    MSTAlgorithm.findMST(network); // Calculate the MST result
                    double KruskalfinishTime = System.currentTimeMillis();// End time of Kruskal
                    double kruskalFinalTime = KruskalfinishTime - KruskalstartTime; // Final time
                    MSTAlgorithm.displayMSTcost(); // Get the MST-Cost 
                    System.out.println("Running time  for Kruskal Algorithm: "+ kruskalFinalTime);
                    
                    //--------------------------------------------- PQPRIM ------------------------------------------------- //
                    System.out.println("\nThe phone network (minimum spanning tree) generated by min-heap based Prim algorithm");
                    
                    MSTAlgorithm = new MHPrimAlg(network); // Choose PQPrim 
                    double MinHeapPrimstartTime = System.currentTimeMillis();//start time of PQPrim
                    MSTAlgorithm.findMST(network); // Calculate the MST result
                    double MinHeapPrimfinishtTime = System.currentTimeMillis();//start time of PQPrim
                    double MinHeapPrimlFinalTime = MinHeapPrimfinishtTime - MinHeapPrimstartTime; // Final time
                    MSTAlgorithm.displayMSTcost(); // Get the MST-Cost 
                    System.out.println("Running time for MinHeapPrim Algorithm: "+ MinHeapPrimlFinalTime);
                    
                } 
            } 
     
      
  } 

    private PhoneNWDesignApp() {
    }
}